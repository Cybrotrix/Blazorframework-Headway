// <auto-generated />
using System;
using Headway.Repository.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Headway.MigrationsSqlite.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.5");

            modelBuilder.Entity("Headway.Core.Model.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<int?>("ModuleId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Permission")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("CategoryId");

                    b.HasIndex("ModuleId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Headway.Core.Model.Config", b =>
                {
                    b.Property<int>("ConfigId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<string>("Document")
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<string>("ModelApi")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("NavigateConfig")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("NavigatePage")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("NavigateProperty")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("NavigateResetBreadcrumb")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OrderModelBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("ConfigId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Configs");
                });

            modelBuilder.Entity("Headway.Core.Model.ConfigContainer", b =>
                {
                    b.Property<int>("ConfigContainerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("ComponentArgs")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ConfigContainerId1")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ConfigId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Container")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<string>("Label")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ParentCode")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("ConfigContainerId");

                    b.HasIndex("ConfigContainerId1");

                    b.HasIndex("ConfigId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ConfigContainers");
                });

            modelBuilder.Entity("Headway.Core.Model.ConfigItem", b =>
                {
                    b.Property<int>("ConfigItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Component")
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<string>("ComponentArgs")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ConfigContainerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ConfigId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConfigName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsIdentity")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsTitle")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PropertyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Tooltip")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("ConfigItemId");

                    b.HasIndex("ConfigContainerId");

                    b.HasIndex("ConfigId");

                    b.ToTable("ConfigItems");
                });

            modelBuilder.Entity("Headway.Core.Model.DemoModel", b =>
                {
                    b.Property<int>("DemoModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Checkbox")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Decimal")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("Dropdown")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DropdownComplexId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Integer")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OptionHorizontal")
                        .HasColumnType("TEXT");

                    b.Property<string>("OptionVertical")
                        .HasColumnType("TEXT");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("TextMultiline")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("DemoModelId");

                    b.HasIndex("DropdownComplexId");

                    b.ToTable("DemoModels");
                });

            modelBuilder.Entity("Headway.Core.Model.DemoModelComplexProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DemoModelComplexProperties");
                });

            modelBuilder.Entity("Headway.Core.Model.DemoModelItem", b =>
                {
                    b.Property<int>("DemoModelItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DemoModelId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.HasKey("DemoModelItemId");

                    b.HasIndex("DemoModelId");

                    b.ToTable("DemoModelItems");
                });

            modelBuilder.Entity("Headway.Core.Model.DemoModelTreeItem", b =>
                {
                    b.Property<int>("DemoModelTreeItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("DemoModelId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DemoModelTreeItemId1")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ParentCode")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("DemoModelTreeItemId");

                    b.HasIndex("DemoModelId");

                    b.HasIndex("DemoModelTreeItemId1");

                    b.ToTable("DemoModelTreeItems");
                });

            modelBuilder.Entity("Headway.Core.Model.MenuItem", b =>
                {
                    b.Property<int>("MenuItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Config")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("NavigatePage")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Permission")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("MenuItemId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("MenuItems");
                });

            modelBuilder.Entity("Headway.Core.Model.Module", b =>
                {
                    b.Property<int>("ModuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Permission")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("ModuleId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("Headway.Core.Model.Permission", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("PermissionId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("Headway.Core.Model.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("RoleId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Headway.Core.Model.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PermissionRole", b =>
                {
                    b.Property<int>("PermissionsPermissionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RolesRoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PermissionsPermissionId", "RolesRoleId");

                    b.HasIndex("RolesRoleId");

                    b.ToTable("PermissionRole");
                });

            modelBuilder.Entity("PermissionUser", b =>
                {
                    b.Property<int>("PermissionsPermissionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UsersUserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PermissionsPermissionId", "UsersUserId");

                    b.HasIndex("UsersUserId");

                    b.ToTable("PermissionUser");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<int>("RolesRoleId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UsersUserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("RolesRoleId", "UsersUserId");

                    b.HasIndex("UsersUserId");

                    b.ToTable("RoleUser");
                });

            modelBuilder.Entity("Headway.Core.Model.Category", b =>
                {
                    b.HasOne("Headway.Core.Model.Module", "Module")
                        .WithMany("Categories")
                        .HasForeignKey("ModuleId");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("Headway.Core.Model.ConfigContainer", b =>
                {
                    b.HasOne("Headway.Core.Model.ConfigContainer", null)
                        .WithMany("ConfigContainers")
                        .HasForeignKey("ConfigContainerId1");

                    b.HasOne("Headway.Core.Model.Config", null)
                        .WithMany("ConfigContainers")
                        .HasForeignKey("ConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Headway.Core.Model.ConfigItem", b =>
                {
                    b.HasOne("Headway.Core.Model.ConfigContainer", "ConfigContainer")
                        .WithMany()
                        .HasForeignKey("ConfigContainerId");

                    b.HasOne("Headway.Core.Model.Config", null)
                        .WithMany("ConfigItems")
                        .HasForeignKey("ConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConfigContainer");
                });

            modelBuilder.Entity("Headway.Core.Model.DemoModel", b =>
                {
                    b.HasOne("Headway.Core.Model.DemoModelComplexProperty", "DropdownComplex")
                        .WithMany()
                        .HasForeignKey("DropdownComplexId");

                    b.Navigation("DropdownComplex");
                });

            modelBuilder.Entity("Headway.Core.Model.DemoModelItem", b =>
                {
                    b.HasOne("Headway.Core.Model.DemoModel", null)
                        .WithMany("DemoModelItems")
                        .HasForeignKey("DemoModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Headway.Core.Model.DemoModelTreeItem", b =>
                {
                    b.HasOne("Headway.Core.Model.DemoModel", null)
                        .WithMany("DemoModelTreeItems")
                        .HasForeignKey("DemoModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Headway.Core.Model.DemoModelTreeItem", null)
                        .WithMany("DemoModelTreeItems")
                        .HasForeignKey("DemoModelTreeItemId1");
                });

            modelBuilder.Entity("Headway.Core.Model.MenuItem", b =>
                {
                    b.HasOne("Headway.Core.Model.Category", "Category")
                        .WithMany("MenuItems")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("PermissionRole", b =>
                {
                    b.HasOne("Headway.Core.Model.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionsPermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Headway.Core.Model.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PermissionUser", b =>
                {
                    b.HasOne("Headway.Core.Model.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionsPermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Headway.Core.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UsersUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("Headway.Core.Model.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Headway.Core.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UsersUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Headway.Core.Model.Category", b =>
                {
                    b.Navigation("MenuItems");
                });

            modelBuilder.Entity("Headway.Core.Model.Config", b =>
                {
                    b.Navigation("ConfigContainers");

                    b.Navigation("ConfigItems");
                });

            modelBuilder.Entity("Headway.Core.Model.ConfigContainer", b =>
                {
                    b.Navigation("ConfigContainers");
                });

            modelBuilder.Entity("Headway.Core.Model.DemoModel", b =>
                {
                    b.Navigation("DemoModelItems");

                    b.Navigation("DemoModelTreeItems");
                });

            modelBuilder.Entity("Headway.Core.Model.DemoModelTreeItem", b =>
                {
                    b.Navigation("DemoModelTreeItems");
                });

            modelBuilder.Entity("Headway.Core.Model.Module", b =>
                {
                    b.Navigation("Categories");
                });
#pragma warning restore 612, 618
        }
    }
}
