@typeparam T where T : class, new()
@inherits TreeDetailBase<T> 

<div class="container container-body float-start">
	<div class="row">
		<div class="col-sm">
            @if(dynamicModel != null)
            {
                <MudToolBar DisableGutters="true" Style="border-bottom: 1px solid gray;">
                    <MudTooltip Text="Clear selection">
                        <MudIconButton ButtonType="ButtonType.Button" Color="Color.Inherit" Icon="@Icons.Material.Filled.Undo" OnClick="NewAsync"/>
                    </MudTooltip>
                    <MudTooltip Text="Add to or update list">
                        <MudIconButton ButtonType="ButtonType.Button" Color="Color.Inherit" Icon="@Icons.Material.Filled.Add" OnClick="() => AddAsync(dynamicModel)"/>
                    </MudTooltip>
                    <MudSpacer />
                    <MudTooltip Text="Remove from list">
                        <MudIconButton ButtonType="ButtonType.Button" Color="Color.Inherit" Icon="@Icons.Material.Filled.Close" OnClick="() => RemoveAsync(dynamicModel)"/>
                    </MudTooltip>
                </MudToolBar>

                @foreach(var rootContainer in dynamicModel.RootContainers)
                {
                    <DynamicComponent @key="rootContainer.UniqueId" Type="rootContainer.DynamicComponent" Parameters="rootContainer.Parameters" />   
                }
            }
		</div>
		<div class="col-sm">
            @if (Field != null)
            {
                <table class="table">
                    @RenderTreeView()    
                </table>
            }
		</div>
	</div>
</div>
