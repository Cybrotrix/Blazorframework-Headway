@using Microsoft.AspNetCore.Components.Authorization

@foreach (var module in modules)
{
    @RenderModule(module);
}

@code {
    [Inject]
    public IAppCache AppCache { get; set; }

    [Inject]
    public IModuleApiRequest ModuleApiRequest { get; set; }

    [Inject]
    AuthenticationStateProvider AuthenticationStateProvider { get; set; }

    private IEnumerable<Module> modules = new List<Module>();

    protected async override Task OnParametersSetAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync().ConfigureAwait(false);
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            if (user.HasClaim(c => c.Value.Equals(Claims.HEADWAY_USER)))
            {
                modules = await ModuleApiRequest.GetModulesAsync().ConfigureAwait(false);
            }
        }

        await base.OnParametersSetAsync().ConfigureAwait(false);
    }

    private RenderFragment RenderModule(Module module) => __builder =>
    {
        @if (module != null)
        {
            <MudNavGroup Title="@module.Name" Icon=@IconHelper.GetOutlined(module.Icon) HideExpandIcon="true" Expanded="true">
                @foreach (var category in module.Categories)
                {
                    <MudNavGroup Title="@category.Name" Icon=@IconHelper.GetOutlined(category.Icon) HideExpandIcon="true" Expanded="true">
                        @foreach(var menuItem in category.MenuItems)
                        {
                            <MudNavLink Href="@menuItem.NavigateFullPath()" Icon=@IconHelper.GetOutlined(menuItem.Icon) @onclick:stopPropagation Match="NavLinkMatch.All">@menuItem.Name</MudNavLink>
                        }
                    </MudNavGroup>
                }
            </MudNavGroup>
        }
    };
}
