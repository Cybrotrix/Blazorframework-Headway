@using Headway.Core.Enums

<div>
    @frame.FrameName
    <table>
        @foreach (var fragment in frame.RootFragmentContainer.Fragments)
        {
            <tr>
                <td><label>@fragment.FragmentName</label></td>
                <td>
                    @if (fragment.FragmentType.Equals(FragmentType.Text))
                    {
                        <input type="text" @onchange="@((ChangeEventArgs e) => OnChange(e,fragment.FragmentName))" />
                    }

                    @if (fragment.FragmentType.Equals(FragmentType.Date))
                    {
                        <input type="date" @onchange="@((ChangeEventArgs e) => OnChange(e,fragment.FragmentName))" />
                    }
                </td>
            </tr>
        }
    </table>
</div>

@code {
    private Frame frame;

    [Parameter]
    public string FrameName { get; set; }

    protected override Task OnInitializedAsync()
    {
        var fragments = new List<IFragment>();
        fragments.Add(new FragmentContainer { FrameId = 1, FragmentId = 1, FragmentContainerId = 0, FragmentName = "Root", FragmentType = FragmentType.Div, Fragments = new List<IFragment>() });
        fragments.Add(new Fragment { FrameId = 1, FragmentId = 2, FragmentContainerId = 1, FragmentName = "Name", FragmentType = FragmentType.Text });
        fragments.Add(new Fragment { FrameId = 1, FragmentId = 3, FragmentContainerId = 1, FragmentName = "DateOfBirth", FragmentType = FragmentType.Date });

        ((FragmentContainer)fragments[0]).Fragments.Add(fragments[1]);
        ((FragmentContainer)fragments[0]).Fragments.Add(fragments[2]);

        frame = new Frame
        {
            FrameId = 1,
            FrameName = FrameName,
            RootFragmentContainer = (IFragmentContainer)fragments[0],
            Fragments = fragments
        };

        return base.OnInitializedAsync();
    }

    private static void OnChange(ChangeEventArgs e, string key)
    {

    }
}
