@using Microsoft.AspNetCore.Components.Authorization

<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="">Headway</a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <AuthorizeView Roles="@Roles.HEADWAY_USER">
        <div class="container">
            <div class="row">
                <ul class="nav flex-column">
                    @foreach (var menuItem in menuItems)
                    {
                        @RenderMenuItem(menuItem)
                    }
                </ul>
            </div>
            <div class="row">
                <div class="col">
                    <span class="align-bottom">
                        <button type="button" class="nav-module">Left</button>
                        <button type="button" class="nav-module">Middle</button>
                        <button type="button" class="nav-module">Right</button>
                    </span>
                </div>
             </div>
        </div>
    </AuthorizeView>
</div>

@code {
    [Inject]
    public IMenuService MenuService { get; set; }

    [Inject]
    AuthenticationStateProvider AuthenticationStateProvider { get; set; }

    private bool collapseNavMenu = true;
    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private string previousMenu = string.Empty;

    [Parameter]
    public bool IsAuthorized { get; set; }

    private IEnumerable<MenuItem> menuItems = new List<MenuItem>();

    protected async override Task OnParametersSetAsync()
    {
        // can only call async in blazor in the lifecycle events
        // OnInitializedAsync lifecycle event only gets called before first render
        // OnParametersSetAsync lifecycle event gets called every time the parameters are set by the parent
        // In the parent wrap a AuthorizeView around the NavMenu, setting the IsAuthorized parameter base on Authorized and NotAuthorized
        // When IsAuthorized is true build the navigation menu

        if (IsAuthorized)
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity.IsAuthenticated)
            {
                if (user.HasClaim(c => c.Type == ClaimTypes.ROLE && c.Value.Equals(Roles.HEADWAY_USER)))
                {
                    menuItems = await MenuService.GetMenuItemsAsync();
                }
            }
        }
        else
        {
            menuItems = new List<MenuItem>();
        }

        await base.OnParametersSetAsync();
    }

    private RenderFragment RenderMenuItem(MenuItem menuItem) => __builder =>
    {
        <li class="nav-item px-3">
            @if(!menuItem.MenuItems.Any())
            {
                <NavLink class="nav-link" href="@menuItem.Path" @onclick="() => OnNavigationItemClick(menuItem.Name)" Match="NavLinkMatch.All">
                    <span class="@menuItem.ImageClass" aria-hidden="true"></span> @menuItem.Name
                </NavLink>
            }
            else
            {
                <span class="@menuItem.ImageClass" aria-hidden="true" @onclick="() => OnNavigationItemClick(menuItem.Name)"></span> @menuItem.Name

                @if(menuItem.Name.Equals(previousMenu)
                    && menuItem.IsExpanded)
                {
                    <ul class="nav flex-column">
                        @foreach (var subMenuItem in menuItem.MenuItems)
                        {
                            @RenderMenuItem(subMenuItem);
                        }
                    </ul>
                }

                menuItem.IsExpanded = !menuItem.IsExpanded;
            }
        </li>
    };

    private  void OnNavigationItemClick(string currentMenu)
    {
        previousMenu = currentMenu;
    }

    private void OnClick(string currentMenu)
    {

    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
}
