@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="">Headway</a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <AuthorizeView Roles="@Roles.HEADWAY_USER">
        @if (menuItems != null)
        {
            <ul class="nav flex-column">
                @foreach (var menuItem in menuItems)
                {
                    <li class="nav-item px-3">
                        <NavLink class="nav-link" href="@menuItem.Path" @onclick="() => OnClick(menuItem)" Match="NavLinkMatch.All">
                            <span class="@menuItem.ImageClass" aria-hidden="true"></span> @menuItem.Name
                        </NavLink>
                        @if (expandMenuItems && menuItem.Id.Equals(activeParentMenuItem) && menuItem.MenuItems.Count > 0)
                        {
                            <ul class="nav flex-column">
                                @foreach (var subMenuItem in menuItem.MenuItems)
                                {
                                    <li class="nav-item px-3">
                                        <NavLink class="nav-link" href="@subMenuItem.Path" @onclick="() => OnClick(subMenuItem)" Match="NavLinkMatch.All">
                                            <span class="@subMenuItem.ImageClass" aria-hidden="true"></span> @subMenuItem.Name
                                        </NavLink>
                                    </li>
                                }
                            </ul>
                        }
                    </li>
                }
            </ul>
        }
    </AuthorizeView>
</div>

@code {

    [Inject]
    public IMenuService MenuService { get; set; }

    private IEnumerable<MenuItem> menuItems;

    private bool collapseNavMenu = true;
    private bool expandMenuItems = false;
    private int activeParentMenuItem = 0;
    private int previousActiveParentMenuItem = 0;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        Console.WriteLine("NavMenu - Start OnInitializedAsync()");
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        Console.WriteLine($"user.Identity.Name : {user.Identity.Name}");

        Console.WriteLine($"user.Identity.IsAuthenticated : {user.Identity.IsAuthenticated}");

        Console.WriteLine($"user.IsInRole(Roles.HEADWAY_USER) : {user.IsInRole(Roles.HEADWAY_USER)}");

        if (user.Identity.IsAuthenticated)
        {
            if (user.HasClaim(c => c.Type == ClaimTypes.ROLE && c.Value.Equals(Roles.HEADWAY_USER)))
            {
                menuItems = await MenuService.GetMenuItemsAsync();
            }
        }

        Console.WriteLine("NavMenu - End OnInitializedAsync()");
    }

    private void OnClick(MenuItem menuItem)
    {
        if(menuItem.ParentId.Equals(0))
        {
            activeParentMenuItem = menuItem.Id;

            if (previousActiveParentMenuItem != activeParentMenuItem)
            {
                expandMenuItems = true;
            }
            else
            {
                expandMenuItems = !expandMenuItems;
            }
        }

        previousActiveParentMenuItem = activeParentMenuItem;
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
}
