@using Microsoft.AspNetCore.Components.Authorization

<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="">Headway</a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <AuthorizeView Roles="@Roles.HEADWAY_USER">
        <div class="container">
            <div class="row">
                @if (selectedModule != null)
                {
                    @RenderSelectedModule(selectedModule);
                }
            </div>
            <div class="row">
                <div class="col modules-bottom ">
                    @foreach(var module in modules)
                    {
                        @RenderModules(module);
                    }
                </div>
            </div>
        </div>
    </AuthorizeView>
</div>

@code {
    [Inject]
    public IModuleService ModuleService { get; set; }

    [Inject]
    AuthenticationStateProvider AuthenticationStateProvider { get; set; }

    [Parameter]
    public bool IsAuthorized { get; set; }

    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private IEnumerable<Module> modules = new List<Module>();

    private Module selectedModule = null;

    protected async override Task OnParametersSetAsync()
    {
        // can only call async in blazor in the lifecycle events
        // OnInitializedAsync lifecycle event only gets called before first render
        // OnParametersSetAsync lifecycle event gets called every time the parameters are set by the parent
        // In the parent wrap a AuthorizeView around the NavMenu, setting the IsAuthorized parameter base on Authorized and NotAuthorized
        // When IsAuthorized is true build the navigation menu

        if (IsAuthorized)
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity.IsAuthenticated)
            {
                if (user.HasClaim(c => c.Type == ClaimTypes.ROLE && c.Value.Equals(Roles.HEADWAY_USER)))
                {
                    modules = await ModuleService.GetModulesAsync();
                }
            }
        }
        else
        {
            modules = new List<Module>();
        }

        await base.OnParametersSetAsync();
    }

    private RenderFragment RenderModules(Module module) => __builder =>
    {
        @if (module != null)
        {
            <button type="button" class="nav-module" @onclick="() => OnModuleClick(module)">@module.Name</button>
        }
    };

    private RenderFragment RenderSelectedModule(Module module) => __builder =>
    {
        @if (module != null)
        {
            <span class="module pt-3 pl-4">@module.Name</span>
            @foreach (var category in module.Categories)
            {
                <span class="category pt-3 pl-5">@category.Name</span>
                <ul>
                    @foreach (var menuItem in category.MenuItems)
                    {
                        <li class="nav-item px-3">
                            <NavLink class="nav-link" href="@menuItem.Path" Match="NavLinkMatch.All">
                                <span class="@menuItem.ImageClass" aria-hidden="true"></span> @menuItem.Name
                            </NavLink>
                        </li>
                    }
                </ul>
            }
        }
    };

    private void OnModuleClick(Module module)
    {
        selectedModule = module;
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
}
